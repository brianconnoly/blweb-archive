var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

buzzlike.service('contactListService', function(itemService, account, rpc, actionsService) {
  var classEntity;
  classEntity = (function(superClass) {
    extend(classEntity, superClass);

    function classEntity() {
      return classEntity.__super__.constructor.apply(this, arguments);
    }

    classEntity.prototype.itemType = 'contactList';

    classEntity.prototype.init = function() {
      this.byUserId = {};
      classEntity.__super__.init.call(this);
      return actionsService.registerAction({
        sourceType: 'userNotMe',
        sourceContext: 'contactList',
        phrase: 'remove_from_list',
        action: (function(_this) {
          return function(data) {
            return _this.call('removeMembers', {
              id: data.sourceContext.id,
              users: data.ids
            });
          };
        })(this)
      });
    };

    classEntity.prototype.getByUserId = function(userId, cb) {
      if (this.byUserId[userId] === true) {
        if (typeof cb === "function") {
          cb(this.byUserId[userId]);
        }
        return this.byUserId[userId];
      }
      return this.call('getByUserId', (function(_this) {
        return function(item) {
          return typeof cb === "function" ? cb(_this.handleItem(item)) : void 0;
        };
      })(this));
    };

    classEntity.prototype.handleItem = function(item) {
      var handled;
      handled = classEntity.__super__.handleItem.call(this, item);
      this.byUserId[handled.userId] = handled;
      return handled;
    };

    return classEntity;

  })(itemService);
  return new classEntity();
});
