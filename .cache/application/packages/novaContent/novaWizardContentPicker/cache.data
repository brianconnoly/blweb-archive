var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

tC['/novaWizardContentPicker/template.jade'] = "<div class=\"breadCrombs\"> <div ng-repeat=\"cromb in crombs\" ng-class=\"{'current':currentCromb == cromb}\" ng-click=\"goCromb(cromb)\" class=\"cromb\"> <div ng-if=\"cromb.cover\" nova-item-object=\"cromb.cover\" nova-item-preview-type=\"simple\" class=\"novaItem novaItemPreview\"></div><span class=\"name\">{{cromb.name}}</span> </div> </div> <div ng-if=\"isLoading\" class=\"loaderShield\"> <div class=\"novaLoader\"></div> </div> <div class=\"itemsContainer\"> <div ng-repeat=\"item in items\" ng-dblclick=\"activateItem(item)\" class=\"pickerItem novaItem\"> <div class=\"novaItemPreview\"></div> <div ng-click=\"wizard.pick(item)\" ng-class=\"{'active':wizard.isPicked(item)}\" class=\"itemPicker\"></div> </div> </div>";

buzzlike.directive('novaWizardContentPicker', function(contentService, projectService, $filter) {
  return {
    restrict: 'C',
    template: tC['/novaWizardContentPicker/template.jade'],
    link: function(scope, element, attrs, ngModel) {
      var breadCrombs, currentPage, currentProject, elem, fetching, getPage, lastCromb, scrollElem, totalItems;
      elem = $(element);
      scrollElem = elem.parent();
      breadCrombs = elem.find('.breadCrombs')[0];
      scope.items = [];
      scope.wizard.data.contentIds = [];
      scope.isLoading = false;
      currentPage = 0;
      totalItems = null;
      fetching = false;
      lastCromb = null;
      getPage = function() {
        if (scope.isLoading) {
          return false;
        }
        scope.isLoading = true;
        if (lastCromb !== scope.currentCromb) {
          scope.items.length = 0;
          currentPage = 0;
          totalItems = null;
          lastCromb = scope.currentCromb;
        }
        if (totalItems && scope.items.length >= totalItems) {
          return false;
        }
        contentService.query({
          projectId: scope.wizard.data.projectId,
          parent: scope.currentCromb.parent,
          limit: 40,
          page: currentPage,
          sortBy: 'created',
          sortType: 'DESC'
        }, function(items, total) {
          var i, item, len;
          totalItems = total;
          currentPage++;
          for (i = 0, len = items.length; i < len; i++) {
            item = items[i];
            if (indexOf.call(scope.items, item) < 0) {
              scope.items.push(item);
            }
          }
          return scope.isLoading = false;
        });
        return true;
      };
      scope.crombs = [];
      scope.currentCromb = null;
      scope.goCromb = function(cromb) {
        var index;
        if (cromb === scope.currentCromb) {
          return;
        }
        index = scope.crombs.indexOf(cromb);
        if (index > -1) {
          scope.crombs.length = index + 1;
        } else {
          scope.crombs.push(cromb);
        }
        scope.currentCromb = cromb;
        setTimeout(function() {
          return breadCrombs.scrollLeft = breadCrombs.scrollWidth;
        }, 0);
        return getPage();
      };
      scope.activateItem = function(item) {
        if (item.type !== 'folder') {
          return;
        }
        scope.goCromb({
          name: item.name || $filter('timestampMask')(ts, 'Папка от DD.M.YY'),
          image: item.contentIds[0],
          cover: contentService.getById(item.contentIds[0]),
          parent: item.id
        });
        return true;
      };
      return currentProject = projectService.getById(scope.wizard.data.projectId, function(item) {
        if (item.profileUserId == null) {
          scope.goCromb({
            name: item.name,
            image: item.appearance.cover,
            cover: contentService.getById(item.appearance.cover),
            parent: 'null'
          });
        } else {
          scope.goCromb({
            name: scope.user.name,
            cover: scope.user,
            parent: 'null'
          });
        }
        return elem.on('mousewheel', function(e, delta) {
          if (scrollElem[0].scrollTop + scrollElem.height() > scrollElem[0].scrollHeight - 200) {
            if (getPage()) {
              return scope.$apply();
            }
          }
        });
      });
    }
  };
});

registerStyles('novaWizardContentPicker', ".novaWizardContentPicker {\n  overflow: hidden;\n  padding-top: 40px;\n}\n.novaWizardContentPicker .pickerItem .novaItemPreview {\n  pointer-events: none;\n}\n.novaWizardContentPicker .itemPicker {\n  position: absolute;\n  bottom: 6px;\n  right: 6px;\n  -webkit-border-radius: 20px;\n  border-radius: 20px;\n  height: 14px;\n  width: 14px;\n  border: 1px solid #3496f2;\n  background: #fff;\n  cursor: pointer;\n}\n.novaWizardContentPicker .itemPicker.active:after {\n  position: absolute;\n  content: \"\";\n  top: 1px;\n  left: 1px;\n  background: #3496f2;\n  width: 12px;\n  height: 12px;\n  -webkit-border-radius: 10px;\n  border-radius: 10px;\n}\n.novaWizardContentPicker .breadCrombs {\n  position: fixed;\n  top: 90px;\n  left: 0;\n  right: 0;\n  height: 40px;\n  z-index: 2;\n  background: rgba(255,255,255,0.9);\n  border: none;\n  white-space: nowrap;\n  overflow: hidden;\n}\n.novaWizardContentPicker .breadCrombs .cromb {\n  display: inline-block;\n  white-space: normal;\n  float: none;\n  margin-right: 30px;\n  line-height: 40px;\n  height: 40px;\n  cursor: pointer;\n}\n.novaWizardContentPicker .breadCrombs .cromb.current {\n  cursor: default;\n}\n.novaWizardContentPicker .breadCrombs .cromb .novaItem,\n.novaWizardContentPicker .breadCrombs .cromb .name {\n  pointer-events: none;\n}\n.novaWizardContentPicker .breadCrombs .cromb .novaItem {\n  float: left;\n  width: 30px;\n  height: 30px;\n  margin: 4px;\n  margin-right: 10px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  border: 1px solid #eee;\n  overflow: hidden;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n}\n.novaWizardContentPicker .breadCrombs .cromb:after {\n  content: \"\";\n  position: absolute;\n  top: 14px;\n  right: -20px;\n  width: 10px;\n  height: 10px;\n  border-top: 1px solid #eee;\n  border-right: 1px solid #eee;\n  -webkit-transform: rotate(45deg);\n  -moz-transform: rotate(45deg);\n  -o-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n  font-size: 30px;\n  color: #eee;\n}\n.novaWizardContentPicker .breadCrombs .cromb:last-child:after {\n  display: none;\n}\n.novaWizardContentPicker .loaderShield {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n  background: rgba(255,255,255,0.4);\n}\n.novaWizardContentPicker .loaderShield .novaLoader {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-top: -20px;\n  margin-left: -10px;\n}\n");
