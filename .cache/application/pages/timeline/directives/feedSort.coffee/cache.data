buzzlike.directive('feedSort', function(stateManager, communityService, groupService, notificationCenter, account) {
  return {
    restrict: 'C',
    link: function(scope, element, attrs) {
      var baseGroupScope, cacheGroups, count, currentPosition, dragFail, dragGroup, dragState, elem, exValue, feed, feedExOrder, feedHeight, feedId, groupElem, groupsCache, helper, mousemove, mouseup, placeholder, placeholderFeed, placeholderGroup, positionCache, removeEvents, saveOrder, scrollBlock, setEvents, startPoint, status, threshold;
      elem = $(element);
      groupElem = $(elem).parents('.feedGroup');
      baseGroupScope = null;
      feed = $(elem).parents('.feedTimeline');
      feedId = null;
      feedExOrder = null;
      scrollBlock = $('.timeline-top')[0];
      placeholderGroup = $('<div class="feedGroup layout_item"><ul class="timelines"><li class="feedTimeline placeholder"></li></ul></div>');
      placeholderFeed = $('<li class="feedTimeline placeholder"></li>');
      placeholder = placeholderFeed;
      helper = null;
      feedHeight = 150;
      threshold = 20;
      positionCache = [];
      groupsCache = [];
      count = 0;
      exValue = 0;
      dragGroup = false;
      startPoint = {
        x: 0,
        y: 0
      };
      status = 'still';
      currentPosition = null;
      elem.bind('mousedown', function(e) {
        if (account.user.settings.compactTimeline === true) {
          feedHeight = 100;
        } else {
          feedHeight = 150;
        }
        e = fixEvent(e);
        groupElem = $(elem).parents('.feedGroup');
        feed = $(elem).parents('.feedTimeline');
        baseGroupScope = angular.element(groupElem[0]).scope();
        feedId = angular.element(feed[0]).scope().lineId;
        startPoint.x = e.pageX;
        startPoint.y = e.pageY;
        dragGroup = isCmd(e);
        setEvents();
        return false;
      });
      dragState = {
        'escape': function() {
          return dragFail();
        }
      };
      cacheGroups = function() {
        var groupId, groups;
        groups = $('.feedGroup');
        groupsCache.length = 0;
        positionCache.length = 0;
        count = 0;
        groupId = 0;
        return groups.each(function() {
          var groupElement, groupScope, timelines, tlId;
          if ($(this).hasClass('currentDragging')) {
            return;
          }
          groupScope = angular.element(this).scope();
          groupsCache.push(groupScope.group.id);
          positionCache.push({
            from: count,
            to: count + 12,
            result: 'create',
            params: {
              type: 'before',
              group: groupId,
              groupScope: groupScope,
              elem: $(this)
            }
          });
          groupElement = $(this);
          count += 12;
          timelines = $(this).find('li.feedTimeline');
          tlId = 0;
          timelines.each(function() {
            if ($(this).hasClass('currentDragging')) {
              return;
            }
            if (dragGroup) {
              positionCache.push({
                from: count,
                to: count + feedHeight,
                result: 'create',
                params: {
                  type: timelines.length / 2 > tlId ? 'before' : 'after',
                  group: groupId,
                  groupScope: groupScope,
                  elem: groupElement
                }
              });
              count += feedHeight;
            } else {
              positionCache.push({
                from: count,
                to: count + Math.ceil(feedHeight / 2),
                result: 'insert',
                params: {
                  type: 'before',
                  group: groupId,
                  elem: $(this),
                  feedId: tlId,
                  groupScope: groupScope
                }
              });
              count += 75;
              positionCache.push({
                from: count,
                to: count + 75,
                result: 'insert',
                params: {
                  type: 'after',
                  group: groupId,
                  elem: $(this),
                  feedId: tlId,
                  groupScope: groupScope
                }
              });
              count += 75;
            }
            return tlId++;
          });
          positionCache.push({
            from: count,
            to: count + 12,
            result: 'create',
            params: {
              type: 'after',
              group: groupId,
              groupScope: groupScope,
              elem: $(this)
            }
          });
          count += 12;
          return groupId++;
        });
      };
      setEvents = function() {
        document.onmousemove = mousemove;
        document.onmouseup = mouseup;
        return document.ondragstart = document.body.onselectstart = function() {
          return false;
        };
      };
      removeEvents = function() {
        return document.onmousemove = document.onmouseup = document.ondragstart = document.body.onselectstart = null;
      };
      mousemove = function(e) {
        var cursorTop, i, index, j, len, pos, top;
        e = fixEvent(e);
        if (status === 'still' && (Math.abs(e.pageX - startPoint.x) > threshold || Math.abs(e.pageY - startPoint.y) > threshold)) {
          status = 'moving';
          index = $(groupElem.children('ul.timelines')[0]).children('.feedTimeline').index(feed[0]);
          feedExOrder = index;
          exValue = index * 174;
          helper = feed.clone();
          helper.css({
            'opacity': '0.4'
          });
          helper.appendTo('body').addClass('collapsed');
          if (dragGroup) {
            groupElem.hide();
            groupElem.addClass('currentDragging');
          } else {
            feed.hide();
            feed.addClass('currentDragging');
            if (baseGroupScope.group.feeds.length === 1) {
              groupElem.hide();
              groupElem.addClass('currentDragging');
            }
          }
          cacheGroups();
          if (dragGroup) {
            groupElem.before(placeholder);
          } else {
            feed.before(placeholder);
          }
          stateManager.applyState(dragState);
        }
        if (status === 'moving') {
          helper.removeClass('top').removeClass('bottom');
          top = e.pageY - 32;
          cursorTop = top + scrollBlock.scrollTop;
          helper.css({
            'top': top + 'px'
          });
          for (i = j = 0, len = positionCache.length; j < len; i = ++j) {
            pos = positionCache[i];
            if (pos.from < cursorTop && pos.to > cursorTop || (i === positionCache.length - 1 && pos.from < cursorTop)) {
              currentPosition = pos;
              switch (pos.result) {
                case 'insert':
                  placeholder.detach();
                  placeholder = placeholderFeed;
                  if (pos.params.type === 'before') {
                    pos.params.elem.before(placeholder);
                  }
                  if (pos.params.type === 'after') {
                    pos.params.elem.after(placeholder);
                  }
                  break;
                case 'create':
                  placeholder.detach();
                  placeholder = placeholderGroup;
                  if (pos.params.type === 'before') {
                    pos.params.elem.before(placeholder);
                  }
                  if (pos.params.type === 'after') {
                    pos.params.elem.after(placeholder);
                  }
                  break;
              }
            }
          }
        }
        return false;
      };
      mouseup = function(e) {
        var index, newOrder;
        if (status === 'moving') {
          if (currentPosition.result === 'insert') {
            if (currentPosition.params.groupScope.group.feeds.length === 0) {
              if (currentPosition.params.groupScope.group.feeds[0].communityId === feedId) {
                dragFail();
                return;
              }
            }
          }
          helper.remove();
          feed.show();
          feed.removeClass('currentDragging');
          groupElem.show();
          groupElem.removeClass('currentDragging');
          if (dragGroup) {
            newOrder = currentPosition.params.type === 'before' ? currentPosition.params.group : currentPosition.params.group + 1;
            groupsCache.splice(newOrder, 0, baseGroupScope.group.id);
            groupService.setOrder(groupsCache);
          } else {
            if (currentPosition.result === 'create') {
              index = currentPosition.params.type === 'before' ? currentPosition.params.group : currentPosition.params.group + 1;
              groupService.insertFeed({
                communityId: feedId,
                newGroup: index,
                from: baseGroupScope.group.id
              });
            }
            if (currentPosition.result === 'insert') {
              index = currentPosition.params.type === 'before' ? currentPosition.params.feedId : currentPosition.params.feedId + 1;
              groupService.insertFeed({
                groupId: currentPosition.params.groupScope.group.id,
                communityId: feedId,
                index: index,
                from: baseGroupScope.group.id
              });
            }
          }
          status = 'still';
          placeholder.detach();
          stateManager.goBack();
        }
        removeEvents();
        scope.$apply();
        return false;
      };
      dragFail = function() {
        status = 'still';
        placeholder.detach();
        helper.remove();
        feed.show();
        groupElem.show();
        feed.removeClass('currentDragging');
        groupElem.removeClass('currentDragging');
        removeEvents();
        return stateManager.goBack();
      };
      saveOrder = function() {
        var cnt, groups, list;
        list = [];
        cnt = 0;
        groups = $('.feedGroup');
        groups.each(function() {
          var el_scope;
          el_scope = angular.element(this).scope();
          list.push(el_scope.group.id);
          el_scope.group.orderNumber = cnt;
          return cnt++;
        });
        return communityService.saveFeedOrder(list, function() {
          return notificationCenter.addMessage({
            text: 128
          });
        });
      };
      return true;
    }
  };
});
