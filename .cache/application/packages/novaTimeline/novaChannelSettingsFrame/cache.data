tC['/novaChannelSettingsFrame/template.jade'] = "<div class=\"novaSettingsLayout\"> <div class=\"settingsBlock\"> <div translate=\"'novaChannelSettings_name'\" class=\"settingsTitle\"></div> <div ng-model=\"group.name\" placeholder-text=\"'novaChannelSettings_name_placeholder'\" ng-change=\"saveGroup()\" ng-model-options=\"{ updateOn: 'default blur', debounce: {'default': 2000, 'blur': 0} }\" class=\"novaEditableDiv\"></div> </div> <div class=\"settingsBlock\"> <div translate=\"'novaChannelSettings_communities'\" class=\"settingsTitle\"></div> <div ng-click=\"addCommunity()\" class=\"communityBox addCommunity\">+</div> <div ng-repeat=\"feed in group.feeds track by feed.communityId\" nova-item-id=\"feed.communityId\" nova-item-type=\"community\" class=\"communityBox novaItem\"> <div nova-item-preview-type=\"square\" class=\"novaItemPreview\"></div> <div ng-click=\"removeCommunity(feed, $event)\" class=\"novaRemove\"></div> </div> </div> <div class=\"settingsBlock\"> <div translate=\"'novaChannelSettings_send_params'\" class=\"settingsTitle\"></div> <div class=\"flagsBox\"> <div class=\"flagBlock\"> <div class=\"value\"> <div ng-model=\"group.fromCommunity\" ng-change=\"saveGroup()\" class=\"novaSimpleCheckbox\"></div> </div> <div translate=\"'novaChannelSettings_fromCommunity'\" class=\"title\"></div> </div> <div ng-if=\"!group.fromCommunity\" class=\"flagBlock\"> <div class=\"value\"> <div ng-model=\"group.useUserSign\" ng-change=\"saveGroup()\" class=\"novaSimpleCheckbox\"></div> </div> <div translate=\"'novaChannelSettings_userSign'\" class=\"title\"></div> </div> </div> </div> <div class=\"settingsBlock\"> <div translate=\"'novaChannelSettings_mediaplan'\" class=\"settingsTitle\"></div> <div ng-repeat=\"rule in rules | filter:ruleFilter | orderBy:rulesOrder\" class=\"ruleItem\"> <div translate=\"'novaChannelSettings_rule_delete'\" ng-click=\"deleteRule(rule)\" class=\"textButton caution\"></div> <div nova-rule-item=\"rule\" class=\"novaRuleSettings\"></div> </div> <div class=\"createRuleItem ruleItem\"> <div ng-if=\"newRule.timestampStart &gt; 0\" translate=\"'novaChannelSettings_create_rule'\" ng-click=\"createRule()\" class=\"textButton\"></div> <div nova-rule-item=\"newRule\" class=\"novaRuleSettings\"></div> </div> </div> <div class=\"settingsBlock\"> <div ng-if=\"rules.length &gt; 0\" translate=\"'novaChannelSettings_delete_rules'\" ng-click=\"deleteAllRules()\" class=\"settingsButton textButton caution\"></div> <div translate=\"'novaChannelSettings_delete'\" ng-click=\"deleteGroup()\" class=\"settingsButton textButton caution\"></div> </div> </div>";

buzzlike.directive('novaChannelSettingsFrame', function(groupService, novaWizard, novaDesktop, ruleService) {
  return {
    restrict: 'C',
    template: tC['/novaChannelSettingsFrame/template.jade'],
    link: function(scope, element, attrs, ngModel) {
      var elem;
      elem = $(element);
      scope.flowFrame.maxWidth = 320;
      scope.group = groupService.getById(scope.flowFrame.item.id);
      scope.sendParams = {
        fromCommunity: false,
        useUserSign: false
      };
      scope.addCommunity = function() {
        return novaWizard.fire('channel_add_communities', {
          channelId: scope.flowFrame.item.id
        });
      };
      scope.removeCommunity = function(feed) {
        removeElementFromArray(feed, scope.group.feeds);
        return groupService.save({
          id: scope.group.id,
          feeds: scope.group.feeds
        });
      };
      scope.saveGroup = function() {
        return groupService.save(scope.group);
      };
      scope.deleteGroup = function() {
        return novaDesktop.launchApp({
          app: 'novaOptionsListApp',
          noSave: true,
          data: {
            text: 'novaChannelSettings_confirm_delete',
            description: 'popup_community_delete_subtitle',
            onAccept: (function(_this) {
              return function() {
                return groupService["delete"]({
                  id: scope.group.id,
                  type: scope.group.type
                }, function() {
                  return scope.flowBox.closeFlowFrame(scope.flowFrame);
                });
              };
            })(this)
          }
        });
      };
      scope.rules = ruleService.fetchByGroupId(scope.flowFrame.item.id);
      scope.newRule = {
        timestampStart: 0,
        dayMask: [true, true, true, true, true, true, true],
        groupId: scope.flowFrame.item.id
      };
      scope.rulesOrder = function(rule) {
        var dateObj;
        dateObj = new Date(rule.timestampStart);
        return dateObj.getHours() * HOUR + dateObj.getMinutes() * MIN;
      };
      scope.createRule = function() {
        ruleService.create(scope.newRule);
        scope.newRule.timestampStart = 0;
        return scope.newRule.dayMask = [true, true, true, true, true, true, true];
      };
      scope.deleteRule = function(rule) {
        return ruleService["delete"]({
          id: rule.id,
          type: rule.type
        });
      };
      scope.ruleFilter = function(rule) {
        return rule.deleted !== true && (rule.combId == null);
      };
      return scope.deleteAllRules = function() {
        return novaDesktop.launchApp({
          app: 'novaOptionsListApp',
          noSave: true,
          data: {
            text: 'novaChannelSettings_confirm_delete_rules',
            description: 'novaChannelSettings_confirm_delete_rules_description',
            onAccept: (function(_this) {
              return function() {
                var i, len, ref, results, rule;
                ref = scope.rules;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  rule = ref[i];
                  results.push(ruleService["delete"]({
                    id: rule.id,
                    type: rule.type
                  }));
                }
                return results;
              };
            })(this)
          }
        });
      };
    }
  };
});

registerStyles('novaChannelSettingsFrame', ".novaChannelSettingsFrame {\n  overflow-y: auto;\n}\n.novaChannelSettingsFrame .communityBox {\n  float: left;\n  width: 60px;\n  height: 60px;\n  margin: 5px;\n  border: 1px solid #f2f2f2;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  overflow: hidden;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n}\n.novaChannelSettingsFrame .communityBox .novaItemPreview {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n.novaChannelSettingsFrame .communityBox:hover .name {\n  max-height: 60px;\n}\n.novaChannelSettingsFrame .communityBox:hover .novaRemove {\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaChannelSettingsFrame .communityBox .name {\n  padding: 2px 4px;\n  font-size: 9px;\n  max-height: 20px;\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaChannelSettingsFrame .communityBox .novaRemove {\n  position: absolute;\n  top: 4px;\n  right: 4px;\n}\n.novaChannelSettingsFrame .addCommunity {\n  text-align: center;\n  line-height: 60px;\n  font-size: 50px;\n  font-weight: 200;\n  cursor: pointer;\n}\n.novaChannelSettingsFrame .ruleItem {\n  overflow: hidden;\n  padding: 4px 5px;\n}\n.novaChannelSettingsFrame .ruleItem .textButton {\n  font-size: 14px;\n  line-height: 24px;\n  float: right;\n  z-index: 2;\n}\n");
