var authHash, buzzlike;

authHash = window.location.hash.split('#')[1];

window.location.hash = "";

buzzlike = angular.module('buzzlike', ['ngSanitize', 'ngAnimate', 'buzzlike.environment', 'luegg.directives']).config(function($locationProvider) {}).run(function(loginService, tableImport, uploadService, actionsRegister, buffer, timezone, localStorageService, socketNotify, requestService, favouriteService, lotService, groupService, postService, socketAuth, rpc, resize, $animate, account, touchHelper, $rootScope, $location, env, contentService, userService, combService, scheduleService, localization, stateManager, desktopState, httpWrapped, $filter) {
  var basePath, j, len, makePaginator, ref, ref1, simpleCache, sprite;
  socketAuth.onAuth(function() {
    $rootScope.user = account.user;
    buffer.readState();
    groupService.get(function() {
      return $rootScope.$apply();
    });
    lotService.fetchMy();
    favouriteService.fetchMy();
    return requestService.fetchNew();
  });
  window.rpc = rpc;
  window.filter = $filter;
  basePath = location.origin + '/resources/images/icons/';
  if (!window.sprites) {
    window.sprites = ['inspector-handler', 'inspector_chain', 'inspector_chain_cur', 'inspector_close', 'inspector_daily', 'inspector_single', 'inspector_single_cur'];
  }
  if (((ref = window.mediaCache) != null ? ref.length : void 0) > 0) {
    ref1 = window.mediaCache;
    for (j = 0, len = ref1.length; j < len; j++) {
      sprite = ref1[j];
      $('<img>')[0].src = sprite;
    }
  }
  $rootScope.localization = localization;
  $rootScope.translate = localization.translate;
  $rootScope.postLen = 1;
  $rootScope.makeArray = makeArray;
  $rootScope.humanizeDays = humanizeDays;
  $rootScope.makePaginatorFromPages = function(pages, currentPage, size) {
    if (currentPage == null) {
      currentPage = null;
    }
    if (size == null) {
      size = 9;
    }
    if (pages == null) {
      return [];
    }
    pages = pages.length || pages;
    return makePaginator(pages, currentPage, size);
  };
  $rootScope.makePaginator = function(ids, currentPage, size, perPage) {
    var num;
    if (currentPage == null) {
      currentPage = null;
    }
    if (size == null) {
      size = 5;
    }
    if (perPage == null) {
      perPage = 5;
    }
    if (ids == null) {
      return [];
    }
    num = Math.ceil(ids.length / perPage);
    return makePaginator(num, currentPage, size);
  };
  makePaginator = function(num, currentPage, size) {
    var end, i, k, ref2, ref3, results, start;
    start = 0;
    end = num;
    if (currentPage !== null && num > size * 2 + 1) {
      start = currentPage - size;
      end = currentPage + size + 1;
      if (start < 0) {
        end -= start;
        start = 0;
      }
      if (end > num) {
        start -= end - num;
        end = num;
      }
    }
    if (end < start) {
      return [currentPage];
    }
    results = [];
    for (i = k = ref2 = start, ref3 = end; ref2 <= ref3 ? k < ref3 : k > ref3; i = ref2 <= ref3 ? ++k : --k) {
      results.push(i);
    }
    return results;
  };
  $rootScope.makeArrayByFromTo = function(from, to) {
    var c, k, ref2, ref3, results;
    results = [];
    for (c = k = ref2 = from, ref3 = to + 1; ref2 <= ref3 ? k < ref3 : k > ref3; c = ref2 <= ref3 ? ++k : --k) {
      results.push(c);
    }
    return results;
  };
  $rootScope.getCheckAfter = function(val) {
    var hours, mins, result;
    if (val < 1) {
      return '';
    }
    hours = 0;
    mins = 0;
    if (val > HOUR) {
      hours = val / HOUR | 0;
    }
    mins = (val - (hours * HOUR)) / MIN | 0;
    result = '';
    if (hours > 0) {
      result += hours + ' ч.';
    }
    if (mins > 0) {
      if (result !== '') {
        result += ' ';
      }
      result += mins + ' мин.';
    }
    return result;
  };
  $rootScope.currentState = null;
  socketAuth.onLogout(function() {
    groupService.purge();
    account.purge();
    combService.purge();
    contentService.purge();
    return true;
  });
  $rootScope.getSource = function(item) {
    return item.sourceType.substring(0, 2).toUpperCase();
  };
  $rootScope.priceTag = function(notify) {
    if (notify.buzzLot === true) {
      return 'д.';
    } else {
      return 'р.';
    }
  };
  simpleCache = {};
  $rootScope.simpleNumber = function(number) {
    if (simpleCache[number] != null) {
      return simpleCache[number];
    }
    if (number >= 1000000) {
      simpleCache[number] = Math.round(number / 1000000) + 'm';
    } else if (number >= 1000) {
      simpleCache[number] = Math.round(number / 1000) + 'k';
    } else {
      simpleCache[number] = number | 0;
    }
    return simpleCache[number];
  };
  $rootScope.getUserIdent = function(user) {
    var acc;
    if (user.login != null) {
      return user.login;
    }
    if (user.accounts.length > 0) {
      acc = user.accounts[0];
      switch (acc.socialNetwork) {
        case 'ok':
          return 'ok.ru/' + account.screenName || account.publicId;
        case 'vk':
          return 'vk.com/' + account.screenName || account.publicId;
        case 'mm':
          return 'my.mail.ru/' + account.screenName || account.publicId;
        case 'fb':
          return 'facebook.com/' + account.screenName || account.publicId;
        case 'yt':
          return 'youtube.com/' + account.screenName || account.publicId;
      }
    } else {
      return localization.translate('unknown_user');
    }
  };
  window.cleanLS = function() {
    var i, results;
    results = [];
    for (i in localStorage) {
      results.push(delete localStorage[i]);
    }
    return results;
  };
  window.cleanCookie = function() {
    var popup;
    popup = window.open(env.baseurl);
    popup.document.cookie = '';
    return popup.close();
  };
  window.clean = function() {
    cleanLS();
    return cleanCookie();
  };
  window.setVar = function(key, value) {
    return localStorageService.add(key, value);
  };
  window.$RS = $rootScope;
  $rootScope.proxyPrefix = window.proxyPrefix;
  $rootScope.proxyImage = function(url) {
    if (!url || url[0] === '/' || url.substr(0, 5) === 'https') {
      return url;
    }
    return $rootScope.proxyPrefix + url;
  };
  window.__pholderHelper = $('<div>', {
    "class": 'placeholder previewContainer',
    id: '__pHolderHelper'
  });
  return window.__pholderIndex = -1;
});
