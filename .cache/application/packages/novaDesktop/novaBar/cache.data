tC['/novaBar/template.jade'] = "<div class=\"rightSide\"> <div session=\"streamsApp.session\" app-data=\"streamsApp\" ng-click=\"launchApp(streamsApp)\" ng-class=\"{'active':novaDesktop.isActive(streamsApp.session), 'launched':streamsApp.session}\" class=\"stickyLauncher appSession novaAppLauncher\"></div> <div nova-item-object=\"newBuffer\" class=\"rightSideItem novaBufferActivator novaItem novaItemDroppable\"></div> </div> <div ng-click=\"showSystemMenu($event)\" class=\"systemMenu\"> <img src=\"/resources/images/login/light.svg\"/></div> <div session=\"launcher.session\" app-data=\"launcher\" ng-repeat=\"launcher in getLaunchers() | orderBy:'order' track by launcher.id\" ng-click=\"launchApp(launcher)\" ng-class=\"{'active':novaDesktop.isActive(launcher.session), 'launched':launcher.session, 'static':launcher.static}\" class=\"stickyLauncher appSession novaAppLauncher\"></div> <div class=\"separator\"></div> <div ng-if=\"novaDesktop.sessions.length &gt; 0\" class=\"apps\"> <div class=\"appsContainer\"> <div class=\"appsWrapper\"> <div ng-click=\"novaDesktop.activate(session)\" ng-repeat=\"session in novaDesktop.sessions\" ng-class=\"{'active':novaDesktop.isActive(session)}\" class=\"appSession novaAppLauncher launched\"></div> </div> </div> <div class=\"separator\"></div> </div> <div class=\"novaAdd\"></div>";

buzzlike.directive('novaBar', function(projectService, account, rpc, novaDesktop, novaMenu) {
  return {
    restrict: 'C',
    template: tC['/novaBar/template.jade'],
    link: function(scope, element, attrs, ngModel) {
      var elem, launchers, systemMenu;
      elem = $(element);
      systemMenu = $(elem.find('.systemMenu')[0]);
      scope.user = account.user;
      scope.novaDesktop = novaDesktop;
      projectService.query({
        member: account.user.id
      });
      launchers = [];
      scope.getLaunchers = function() {
        var id, launcher, ref;
        launchers.length = 0;
        ref = novaDesktop.launchers;
        for (id in ref) {
          launcher = ref[id];
          if (launcher.dock === true) {
            launchers.push(launcher);
          }
        }
        return launchers;
      };
      scope.showOptions = function() {
        return rpc.call('auth.logout');
      };
      scope.showSystemMenu = function(e) {
        var offset, sections;
        sections = [
          {
            type: 'actions',
            items: [
              {
                phrase: 'novaSystemMenu_about',
                action: function() {
                  return window.open('https://vk.com/buzzlike', '_blank');
                }
              }, {
                phrase: 'novaSystemMenu_settings',
                action: function() {
                  return novaDesktop.launchApp({
                    app: 'novaSettingsApp'
                  });
                }
              }, {
                phrase: 'novaSystemMenu_logout',
                description: 'streamFrame_import_description',
                action: function() {
                  return novaDesktop.launchApp({
                    app: 'novaOptionsListApp',
                    noSave: true,
                    data: {
                      text: 'popup_exit_title',
                      description: 'popup_exit_subtitle',
                      onAccept: (function(_this) {
                        return function() {
                          return rpc.call('auth.logout');
                        };
                      })(this)
                    }
                  });
                }
              }
            ]
          }
        ];
        offset = systemMenu.offset();
        novaMenu.show({
          position: {
            x: offset.left + Math.ceil(systemMenu.width() / 2),
            y: offset.top - 10
          },
          sections: sections,
          menuStyle: 'center',
          noApply: true
        });
        return true;
      };
      scope.launchApp = function(launcher) {
        return novaDesktop.launchApp({
          app: launcher.app,
          item: launcher.item
        });
      };
      return scope.newBuffer = {
        type: 'newBuffer'
      };
    }
  };
});

registerStyles('novaBar', ".novaBar {\n  position: absolute;\n  height: 40px;\n  bottom: -50px;\n  left: 0px;\n  right: 0;\n  padding: 5px 10px;\n  background: -webkit-linear-gradient(top, rgba(0,2,11,0) 0%, rgba(0,2,11,0.7) 100%);\n  background: -moz-linear-gradient(top, rgba(0,2,11,0) 0%, rgba(0,2,11,0.7) 100%);\n  background: -o-linear-gradient(top, rgba(0,2,11,0) 0%, rgba(0,2,11,0.7) 100%);\n  background: -ms-linear-gradient(top, rgba(0,2,11,0) 0%, rgba(0,2,11,0.7) 100%);\n  background: linear-gradient(to bottom, rgba(0,2,11,0) 0%, rgba(0,2,11,0.7) 100%);\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n  z-index: 1000;\n  opacity: 0;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n  filter: alpha(opacity=0);\n}\n.novaBar.visible {\n  bottom: 0;\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.maximized .novaBar {\n  background: rgba(0,0,0,0.5);\n  padding: 0;\n}\n.maximized .novaBar .appSession {\n  margin: 8px 3px;\n}\n.novaBar:hover .separator {\n  border-right: solid 2px rgba(255,255,255,0.4);\n}\n.novaBar:hover .appSession {\n  border: solid 2px rgba(255,255,255,0.5);\n}\n.novaBar .systemMenu {\n  float: left;\n  width: 20px;\n  height: 20px;\n  margin: 10px;\n  cursor: pointer;\n  margin-right: 5px;\n}\n.novaBar .systemMenu img {\n  cursor: pointer;\n  height: 20px;\n}\n.novaBar .separator {\n  float: left;\n  border-right: solid 2px rgba(255,255,255,0.2);\n  height: 20px;\n  margin: 10px 10px;\n  pointer-events: none;\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaBar .appSession {\n  overflow: hidden;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  -webkit-transform: translate3D(0, 0, 0);\n  -moz-transform: translate3D(0, 0, 0);\n  -o-transform: translate3D(0, 0, 0);\n  -ms-transform: translate3D(0, 0, 0);\n  transform: translate3D(0, 0, 0);\n  float: left;\n  height: 24px;\n  width: 30px;\n  margin: 8px 5px;\n  background: rgba(255,255,255,0.2);\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  border: solid 2px rgba(255,255,255,0.3);\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n.novaBar .appSession.launched {\n  height: 30px;\n  width: 40px;\n  margin: 5px;\n}\n.novaBar .appSession .itemPreview {\n  pointer-events: none;\n}\n.novaBar .appSession.static {\n  height: 34px;\n  width: 50px;\n  margin: 3px 4px;\n}\n.novaBar .appSession.active,\n.novaBar .appSession:hover {\n  border: solid 2px #fcee21;\n  cursor: default !important;\n}\n.novaBar .appSession:hover {\n  cursor: pointer;\n}\n.novaBar .appSession:active {\n  -webkit-transform: scale(0.9);\n  -moz-transform: scale(0.9);\n  -o-transform: scale(0.9);\n  -ms-transform: scale(0.9);\n  transform: scale(0.9);\n}\n.novaBar .appsContainer .appsWrapper {\n  white-space: nowrap;\n}\n.novaBar .appsContainer .appsWrapper .appSession {\n  display: inline-block;\n  position: relative;\n  opacity: 0;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n  filter: alpha(opacity=0);\n  -webkit-transform: scale(0.8);\n  -moz-transform: scale(0.8);\n  -o-transform: scale(0.8);\n  -ms-transform: scale(0.8);\n  transform: scale(0.8);\n  left: -20px;\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaBar .appsContainer .appsWrapper .appSession.created {\n  left: 0;\n  -webkit-transform: scale(1);\n  -moz-transform: scale(1);\n  -o-transform: scale(1);\n  -ms-transform: scale(1);\n  transform: scale(1);\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaBar .rightSide {\n  float: right;\n}\n.novaBar .rightSide .rightSideItem {\n  float: left;\n}\n");
