buzzlike.service('infinityScroll', function($compile, $rootScope) {
  var addList;
  addList = function(list, type, offset) {
    var scope;
    scope = $rootScope;
    scope.infinityOffset = offset;
    scope.infinityScrollList = list;
    $('.nwfl_viewport').append($compile('<div class="infinity-scroll" ng-model="infinityScrollList" options="' + type + '" ng-click="hideInfinity(0)"></div>')(scope));
    $('.infinity-scroll').transition({
      opacity: 0
    }, 0).transition({
      opacity: 1
    }, 300);
    return true;
  };
  return {
    addList: addList
  };
});

buzzlike.directive("infinityScroll", function(localStorageService, smartDate, stateManager) {
  return {
    restrict: "C",
    require: 'ngModel',
    template: templateCache['/elements/infinityScroll'],
    link: function(scope, element, attrs, ctrl) {
      var addScrollState, escapeState, init, minelement, saveState, t_timer;
      t_timer = {};
      minelement = [];
      scope.options = [];
      escapeState = function() {
        clearTimeout(t_timer);
        $('.infinity-scroll').remove();
        return stateManager.goBack();
      };
      saveState = function() {
        if (attrs.options === 'timezone') {
          if (minelement.length !== 0) {
            scope.userOptions.timezone = minelement.attr('utc');
            localStorageService.remove('user.timezone');
            localStorageService.add('user.timezone', true);
            smartDate.setShiftTime(Math.floor(minelement.attr('utc')));
          }
          return escapeState();
        }
      };
      addScrollState = {
        'enter': saveState,
        'escape': escapeState
      };
      stateManager.applyState(addScrollState);
      ctrl.$render = function() {
        scope.options = ctrl.$viewValue;
        return setTimeout(function() {
          return init();
        }, 0);
      };
      init = function() {
        var allItems, countVis, h, i, lastDelta, padding, selectedElement, tmp_h;
        padding = 16;
        countVis = 7;
        selectedElement = 0;
        lastDelta = 0;
        allItems = $('.infinity-scroll .list .item');
        h = allItems.height() + padding;
        if (allItems.length > countVis) {
          $('.infinity-scroll .list').css({
            height: h * countVis
          });
        } else {
          $('.infinity-scroll .list').css({
            height: h * allItems.length
          });
        }
        $('.infinity-scroll .wrapper').css({
          height: $('.infinity-scroll .list').height()
        });
        $('.infinity-scroll .cur').css({
          height: h + padding / 2,
          marginTop: -h / 2
        });
        $('.infinity-scroll .cur div').css({
          top: -(h / 2) + padding / 2
        });
        tmp_h = 0;
        $('.infinity-scroll .list .item').each(function() {
          if (scope.selectedtimezone === $(this).attr('utc')) {
            selectedElement = $(this).index();
          }
          $(this).css({
            top: tmp_h
          });
          return tmp_h += h;
        });
        i = 0;
        $('.infinity-scroll .list .item').each(function() {
          var countVisPos, elem, list;
          elem = $(this);
          list = $('.infinity-scroll .list');
          countVisPos = selectedElement - Math.floor(countVis / 2);
          if (countVisPos < 0) {
            if (i > countVisPos) {
              list.scrollTop(0);
              $('.infinity-scroll .list').prepend($('.infinity-scroll .list .item').last());
              if (i - 1 <= countVisPos) {
                $('.infinity-scroll .list .item:eq(' + Math.floor(countVis / 2) + ') span').css({
                  color: '#000'
                });
                $('.infinity-scroll .cur div').css({
                  display: 'block'
                });
              }
            }
            i--;
          } else if (i < countVisPos) {
            list.scrollTop(h);
            if (list.scrollTop() >= h - 1) {
              list.scrollTop(0);
              $('.infinity-scroll .list').append($('.infinity-scroll .list .item').first());
              if (i + 1 >= countVisPos) {
                $('.infinity-scroll .list .item:eq(' + Math.floor(countVis / 2) + ') span').css({
                  color: '#000'
                });
                $('.infinity-scroll .cur div').css({
                  display: 'block'
                });
              }
            }
            i++;
          }
          tmp_h = 0;
          return $('.infinity-scroll .list .item').each(function() {
            $(this).css({
              top: tmp_h
            });
            return tmp_h += h;
          });
        });
        if (element.options === 'timezone') {
          $('.infinity-scroll .wrapper').css({
            left: scope.infinityOffset.left - 65,
            top: (padding + 8) + scope.infinityOffset.top - $('.infinity-scroll .wrapper').height() / 2
          });
        } else {
          $('.infinity-scroll .wrapper').css({
            left: scope.infinityOffset.left,
            top: padding + scope.infinityOffset.top - $('.infinity-scroll .wrapper').height() / 2
          });
        }
        $('.infinity-scroll .list').off('mousewheel');
        return $('.infinity-scroll .list').on('mousewheel', function(event, delta, deltaX, deltaY) {
          var scroll, speedCenter;
          if (lastDelta % 40 === 0 && delta % 40 === 0) {
            speedCenter = 0;
          } else {
            speedCenter = 500;
          }
          clearTimeout(t_timer);
          t_timer = setTimeout(function() {
            var cur_top, min, scroll, tmp_min, tmp_result;
            cur_top = $('.infinity-scroll .cur').offset().top;
            min = 1000;
            minelement = [];
            tmp_result = 0;
            tmp_min = 1000;
            $('.infinity-scroll .list .item').each(function() {
              var result;
              result = tmp_result = $(this).offset().top - cur_top;
              if (result < 0) {
                tmp_result *= -1;
              }
              if (tmp_result < tmp_min) {
                tmp_min = tmp_result;
                min = result;
                return minelement = $(this);
              }
            });
            scroll = $('.infinity-scroll .list').scrollTop();
            if (lastDelta % 40 === 0 && delta % 40 === 0) {
              minelement.children('span').css({
                color: '#000'
              });
              return $('.infinity-scroll .cur div').css({
                display: 'block'
              });
            } else {
              return $('.infinity-scroll .list').animate({
                scrollTop: scroll + min
              }, '100', 'swing', function() {
                minelement.children('span').css({
                  color: '#000'
                });
                return $('.infinity-scroll .cur div').css({
                  display: 'block'
                });
              });
            }
          }, speedCenter);
          if (event.originalEvent.wheelDelta / 120 > 0) {
            scroll = $(this).scrollTop() - delta;
            $(this).scrollTop(scroll);
            if ($(this).scrollTop() === 0) {
              $(this).scrollTop(h);
              $('.infinity-scroll .list').prepend($('.infinity-scroll .list .item').last());
            }
          } else {
            scroll = $(this).scrollTop() - delta;
            $(this).scrollTop(scroll);
            if ($(this).scrollTop() > h) {
              $(this).scrollTop(0);
              $('.infinity-scroll .list').append($('.infinity-scroll .list .item').first());
            }
          }
          tmp_h = 0;
          $('.infinity-scroll .list .item').each(function() {
            $(this).children('span').css({
              color: '#fff'
            });
            $(this).css({
              top: tmp_h
            });
            return tmp_h += h;
          });
          if (lastDelta % 40 !== 0 && delta % 40 !== 0) {
            $('.infinity-scroll .cur div').css({
              display: 'none'
            });
          }
          return lastDelta = delta;
        });
      };
      return scope.hideInfinity = function(save) {
        $('.infinity-scroll').transition({
          opacity: 0
        }, 200, function() {
          if (save) {
            saveState();
          } else {
            escapeState();
          }
          return scope.$apply();
        });
        return true;
      };
    }
  };
});
