tC['/novaApp/template.jade'] = "<div ng-style=\"{'zIndex':session.index}\" ng-mousedown=\"desktop.activate(session)\" class=\"novaAppDrag justCreated styleBlack\"> <div class=\"novaAppControls\"></div> <div ng-if=\"session.noItem != true\" class=\"novaAppItem\"></div> <div class=\"novaAppResize noDrag top\"></div> <div class=\"novaAppResize noDrag bottom\"></div> <div class=\"novaAppResize noDrag left\"></div> <div class=\"novaAppResize noDrag right\"></div> <div class=\"novaAppResize noDrag topleft\"></div> <div class=\"novaAppResize noDrag topright\"></div> <div class=\"novaAppResize noDrag bottomright\"></div> <div class=\"novaAppResize noDrag bottomleft\"></div> </div>";

buzzlike.directive('novaApp', function($compile, novaAppStateSaver, operationsService, novaMenu) {
  return {
    restrict: 'C',
    template: tC['/novaApp/template.jade'],
    replace: true,
    link: function(scope, element, attrs, ngModel) {
      var appDirective, checkMaximized, defaults, domElem, elem, focusHandlers, hei, k, ref, resizeHandlers, resizeProgressHandlers, v;
      elem = $(element);
      domElem = elem[0];
      elem.addClass('black');
      scope.stateSaver = new novaAppStateSaver(scope.session.id);
      elem.on('click', function(e) {
        return novaMenu.hide();
      });
      if (scope.session.item != null) {
        elem.addClass(scope.session.item.type + '_' + scope.session.item.id);
        scope.appItem = operationsService.get(scope.session.item.type, scope.session.item.id);
      }
      scope.closeApp = function() {
        scope.session.closing = true;
        elem.addClass('hideAnimationStart');
        setTimeout((function(_this) {
          return function() {
            elem[0].style.transform += ' scale(0.9)';
            elem.addClass('hideAnimation');
            return setTimeout(function() {
              scope.desktop.closeApp(scope.session);
              return scope.$applyAsync();
            }, 500);
          };
        })(this), 0);
        return checkMaximized();
      };
      scope.setWidth = function(wid, noSave) {
        if (noSave == null) {
          noSave = false;
        }
        if ((scope.session.maxWidth != null) && wid > scope.session.maxWidth) {
          wid = scope.session.maxWidth;
        }
        if ((scope.session.minWidth != null) && wid < scope.session.minWidth) {
          wid = scope.session.minWidth;
        }
        if (wid != null) {
          scope.session.size.width = wid;
        }
        if (!scope.session.maximize) {
          domElem.style.width = scope.session.size.width + 'px';
        }
        if (!noSave) {
          return scope.stateSaver.save('size');
        }
      };
      scope.setHeight = function(hei, noSave) {
        if (noSave == null) {
          noSave = false;
        }
        if ((scope.session.maxHeight != null) && hei > scope.session.maxHeight) {
          hei = scope.session.maxHeight;
        }
        if ((scope.session.minHeight != null) && hei < scope.session.minHeight) {
          hei = scope.session.minHeight;
        }
        if (hei != null) {
          scope.session.size.height = hei;
        }
        if (!scope.session.maximize) {
          domElem.style.height = scope.session.size.height + 'px';
        }
        if (!noSave) {
          return scope.stateSaver.save('size');
        }
      };
      scope.setSize = function(wid, hei, noSave) {
        if (noSave == null) {
          noSave = false;
        }
        scope.setWidth(wid, true);
        scope.setHeight(hei, true);
        if (!noSave) {
          return scope.stateSaver.save('size');
        }
      };
      scope.setPosition = function(x, y, noSave) {
        if (noSave == null) {
          noSave = false;
        }
        if ((y != null) && y < -10) {
          y = -10;
        }
        if (x != null) {
          scope.session.position.x = x;
        }
        if (y != null) {
          scope.session.position.y = y;
        }
        if (!scope.session.maximize) {
          elem.css('transform', 'translate3d(' + scope.session.position.x + 'px,' + scope.session.position.y + 'px, 0)');
        }
        if (!noSave) {
          return scope.stateSaver.save('position');
        }
      };
      checkMaximized = function() {
        var app, found, j, len, ref;
        found = false;
        ref = scope.desktop.apps;
        for (j = 0, len = ref.length; j < len; j++) {
          app = ref[j];
          if (app.maximize === true && app.minimize !== true && app.closing !== true) {
            found = true;
          }
        }
        if (found) {
          $('body').addClass('maximized');
        } else {
          $('body').removeClass('maximized');
        }
        return true;
      };
      scope.minimize = function(data, noSave) {
        if (data == null) {
          data = true;
        }
        scope.session.minimize = data;
        if (data) {
          elem.css('display', 'none');
        } else {
          elem.css('display', 'block');
          scope.resized(elem.width(), elem.height());
        }
        if (!noSave) {
          scope.stateSaver.save('minimize');
        }
        return checkMaximized();
      };
      scope.noMaximize = function() {
        return elem.find('.maximizeControl').remove();
      };
      scope.maximize = function(data, noSave) {
        if (noSave == null) {
          noSave = false;
        }
        if (data == null) {
          data = !scope.session.maximize;
        }
        scope.session.maximize = data;
        if (data) {
          elem.css({
            'transform': 'none',
            'top': -2,
            'left': -2,
            'bottom': 0,
            'right': -2,
            'width': 'auto',
            'height': 'auto'
          }).addClass('maximized');
        } else {
          elem.css({
            'transform': 'translate3d(' + scope.session.position.x + 'px,' + scope.session.position.y + 'px, 0)',
            'top': 'auto',
            'left': 'auto',
            'bottom': 'auto',
            'right': 'auto',
            'width': scope.session.size.width,
            'height': scope.session.size.height
          }).removeClass('maximized');
        }
        if (!noSave) {
          scope.stateSaver.save('maximize');
        }
        checkMaximized();
        scope.resized(elem.width(), elem.height());
        return true;
      };
      resizeHandlers = [];
      scope.onResize = function(handler, fire) {
        if (fire == null) {
          fire = true;
        }
        if (fire === true) {
          handler(scope.session.size.width, scope.session.size.height);
        }
        return resizeHandlers.push(handler);
      };
      scope.resized = function(wid, hei) {
        var handler, j, len, results;
        results = [];
        for (j = 0, len = resizeHandlers.length; j < len; j++) {
          handler = resizeHandlers[j];
          results.push(handler(wid, hei));
        }
        return results;
      };
      focusHandlers = [];
      scope.onFocus = function(handler) {
        return focusHandlers.push(handler);
      };
      scope.session.activated = function() {
        var handler, j, len, results;
        if (scope.session.minimize === true) {
          scope.minimize(false);
        }
        results = [];
        for (j = 0, len = focusHandlers.length; j < len; j++) {
          handler = focusHandlers[j];
          results.push(handler());
        }
        return results;
      };
      resizeProgressHandlers = [];
      scope.progressHandlers = [];
      scope.onResizeProgress = function(handler, fire, onlyProgress, name) {
        if (fire == null) {
          fire = true;
        }
        if (onlyProgress == null) {
          onlyProgress = false;
        }
        if (fire === true) {
          handler(scope.session.size.width, scope.session.size.height);
        }
        resizeProgressHandlers.push(handler);
        scope.progressHandlers.push({
          name: name,
          active: true
        });
        if (!onlyProgress) {
          return resizeHandlers.push(handler);
        }
      };
      scope.resizeInProgress = function(wid, hei) {
        var handler, i, j, len, results;
        results = [];
        for (i = j = 0, len = resizeProgressHandlers.length; j < len; i = ++j) {
          handler = resizeProgressHandlers[i];
          if (scope.progressHandlers[i].active === false) {
            continue;
          }
          results.push(handler(wid, hei));
        }
        return results;
      };
      defaults = {
        maximize: false,
        minimize: false,
        position: {
          x: 0,
          y: 0
        },
        size: {
          width: 300,
          height: 200
        }
      };
      for (k in defaults) {
        v = defaults[k];
        if (scope.session[k] == null) {
          scope.session[k] = v;
        }
      }
      appDirective = $('<div>', {
        "class": scope.session.app + ' novaAppFrame'
      });
      if (((ref = scope.appItem) != null ? ref.id : void 0) != null) {
        appDirective.addClass('novaItem');
        appDirective.attr('nova-item-object', 'appItem');
        appDirective.addClass('novaItemDroppable');
      }
      elem.append(appDirective);
      $compile(appDirective)(scope);
      if (scope.session.startPosition === 'center') {
        hei = scope.session.size.height;
        if (hei === 'auto') {
          hei = 300;
        }
        scope.setPosition(Math.ceil(($('.novaDesktop').width() - scope.session.size.width) / 2), Math.ceil(($('.novaDesktop').height() - hei) / 2), true);
      } else {
        scope.desktop.getFreePosition(scope.session);
      }
      scope.stateSaver.register('position', {
        save: function() {
          return scope.session.position;
        },
        load: function(data) {
          return scope.setPosition(data.x, data.y);
        }
      });
      scope.stateSaver.register('size', {
        save: function() {
          return scope.session.size;
        },
        load: function(data) {
          return scope.setSize(data.width, data.height);
        }
      });
      scope.stateSaver.register('maximize', {
        save: function() {
          return scope.session.maximize;
        },
        load: function(data) {
          return scope.maximize(data);
        }
      });
      scope.stateSaver.register('minimize', {
        save: function() {
          return scope.session.minimize;
        },
        load: function(data) {
          return scope.minimize(data);
        }
      });
      scope.setPosition();
      scope.setSize();
      scope.resized();
      if (typeof scope.init === "function") {
        scope.init();
      }
      scope.session.run = function(data) {
        var handler, j, len, results;
        if (typeof scope.reInit === "function") {
          scope.reInit(data);
        }
        results = [];
        for (j = 0, len = focusHandlers.length; j < len; j++) {
          handler = focusHandlers[j];
          results.push(handler());
        }
        return results;
      };
      elem[0].style.transform += ' scale(0.9)';
      return setTimeout(function() {
        if (!scope.session.maximize) {
          elem.css('transform', 'translate3d(' + scope.session.position.x + 'px,' + scope.session.position.y + 'px, 0)');
        } else {
          elem.css('transform', 'none');
        }
        elem.addClass('created');
        return setTimeout(function() {
          elem.removeClass('justCreated');
          return elem.removeClass('created');
        }, 500);
      }, 100);
    }
  };
});

registerStyles('novaApp', ".novaApp {\n  position: absolute;\n  -webkit-transform: translate3d(0, 0, 0) scale(1);\n  -moz-transform: translate3d(0, 0, 0) scale(1);\n  -o-transform: translate3d(0, 0, 0) scale(1);\n  -ms-transform: translate3d(0, 0, 0) scale(1);\n  transform: translate3d(0, 0, 0) scale(1);\n  min-width: 100px;\n  min-height: 50px;\n  -webkit-border-radius: 11px;\n  border-radius: 11px;\n  background: #e0e0e0;\n  border: 1px solid rgba(0,0,0,0.15);\n  -webkit-transition: box-shadow 0.2s ease;\n  -moz-transition: box-shadow 0.2s ease;\n  -o-transition: box-shadow 0.2s ease;\n  -ms-transition: box-shadow 0.2s ease;\n  transition: box-shadow 0.2s ease;\n  -webkit-box-shadow: 0 0 10px 0px rgba(0,0,0,0.5);\n  box-shadow: 0 0 10px 0px rgba(0,0,0,0.5);\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaApp.maximized {\n  -webkit-border-radius: 0;\n  border-radius: 0;\n}\n.novaApp .novaAppFrame {\n  -webkit-border-radius: 10px;\n  border-radius: 10px;\n  overflow: hidden;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n}\n.novaApp.styleWhite {\n  color: #fff;\n}\n.novaApp.styleWhite .bg06 {\n  background: rgba(255,255,255,0.6);\n}\n.novaApp.styleWhite .bg03 {\n  background: rgba(255,255,255,0.6);\n}\n.novaApp.styleWhite .bg01 {\n  background: rgba(255,255,255,0.1);\n}\n.novaApp.styleWhite .bgHover02:hover {\n  background: rgba(255,255,255,0.2);\n}\n.novaApp.styleWhite .border03 {\n  border-color: rgba(255,255,255,0.3);\n}\n.novaApp.styleWhite .borderHover035:hover {\n  border-color: rgba(255,255,255,0.35);\n}\n.novaApp.styleBlack {\n  color: #000;\n}\n.novaApp.styleBlack .bg06 {\n  background: rgba(0,0,0,0.3);\n}\n.novaApp.styleBlack .bg03 {\n  background: rgba(0,0,0,0.6);\n}\n.novaApp.styleBlack .bg01 {\n  background: rgba(0,0,0,0.1);\n}\n.novaApp.styleBlack .bgHover02:hover {\n  background: rgba(0,0,0,0.2);\n}\n.novaApp.styleBlack .border03 {\n  border-color: rgba(0,0,0,0.3);\n}\n.novaApp.styleBlack .borderHover035:hover {\n  border-color: rgba(0,0,0,0.35);\n}\n.novaApp.justCreated {\n  pointer-events: none;\n  opacity: 0;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n  filter: alpha(opacity=0);\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaApp.justCreated.created {\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaApp.active {\n  -webkit-box-shadow: 0 0 15px 0px rgba(0,0,0,0.7);\n  box-shadow: 0 0 15px 0px rgba(0,0,0,0.7);\n}\n.novaApp.hideAnimationStart {\n  pointer-events: none;\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaApp.hideAnimationStart.hideAnimation {\n  opacity: 0;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n  filter: alpha(opacity=0);\n}\n.novaApp.withLeftPanel .novaAppItem {\n  left: 25px;\n}\n.novaApp .novaAppLeftPanel {\n  position: absolute;\n  width: 210px;\n  top: 0px;\n  bottom: 0;\n  left: 0;\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaApp .workarea {\n  position: absolute;\n  left: 210px;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaApp.noLeftPanel .novaAppLeftPanel {\n  width: 50px;\n}\n.novaApp.noLeftPanel .workarea {\n  left: 50px;\n}\n.novaApp .novaAppResize {\n  position: absolute;\n  z-index: 10;\n}\n.novaApp .novaAppResize.top {\n  top: -5px;\n  height: 10px;\n  left: 0;\n  right: 0;\n  cursor: ns-resize;\n}\n.novaApp .novaAppResize.bottom {\n  bottom: -5px;\n  height: 10px;\n  left: 0;\n  right: 0;\n  cursor: ns-resize;\n}\n.novaApp .novaAppResize.left {\n  left: -5px;\n  width: 10px;\n  top: 0;\n  bottom: 0;\n  cursor: ew-resize;\n}\n.novaApp .novaAppResize.right {\n  right: -5px;\n  width: 10px;\n  top: 0;\n  bottom: 0;\n  cursor: ew-resize;\n}\n.novaApp .novaAppResize.topleft {\n  width: 20px;\n  height: 20px;\n  top: -10px;\n  left: -10px;\n  cursor: nwse-resize;\n}\n.novaApp .novaAppResize.topright {\n  width: 20px;\n  height: 20px;\n  top: -10px;\n  right: -10px;\n  cursor: nesw-resize;\n}\n.novaApp .novaAppResize.bottomright {\n  width: 20px;\n  height: 20px;\n  right: -10px;\n  bottom: -10px;\n  cursor: nwse-resize;\n}\n.novaApp .novaAppResize.bottomleft {\n  width: 20px;\n  height: 20px;\n  left: -10px;\n  bottom: -10px;\n  cursor: nesw-resize;\n}\n");
