var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

buzzlike.controller('timelineCtrl', function(buffer, actionsService, complexMenu, postService, contentService, scheduleService, inspectorService, desktopService, ruleService, confirmBox, localization, notificationCenter, multiselect, socketAuth, $rootScope, $scope, groupService, smartDate, localStorageService, account, teamService) {
  var activeGroup, deleteRules, deleteScheds, getActiveGroup;
  if ($scope.session.zoom == null) {
    $scope.session.zoom = 'mid';
  }
  $scope.helpFile = 'timeline';
  if ($scope.session.statsType == null) {
    $scope.session.statsType = 'percent';
  }
  $scope.addFeed = function() {
    return desktopService.launchApp('addFeed', {
      closeOnAdd: true
    });
  };
  $scope.newText = function() {
    var items, process;
    items = multiselect.getFocused();
    process = $scope.progress.add();
    return contentService.create({
      type: 'text',
      value: ''
    }, function(newText) {
      var i, item, len;
      buffer.addItem(newText);
      desktopService.launchApp('textEditor', {
        textId: newText.id
      });
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        postService.addContentIds(item.postId, [newText.id]);
      }
      return $scope.progress.finish(process);
    });
  };
  $scope.newPost = function() {
    return postService.create({}, function(newPost) {
      return buffer.addItem(newPost);
    });
  };
  $scope.showMoreMenu = function(e) {
    var action, actions, groups, i, items, itemsActions, k, len, list;
    items = multiselect.getFocused();
    if (items.length > 0) {
      itemsActions = actionsService.getActions({
        source: items
      });
    } else {
      itemsActions = actionsService.getActions({
        context: {
          type: 'timelineApp'
        }
      });
    }
    if ((itemsActions != null ? itemsActions.length : void 0) > 0) {
      groups = {};
      list = [];
      for (i = 0, len = itemsActions.length; i < len; i++) {
        action = itemsActions[i];
        if (groups[action.category] == null) {
          groups[action.category] = {
            type: 'actions',
            items: []
          };
        }
        groups[action.category].items.push({
          phrase: action.phrase,
          action: action.action,
          priority: action.priority
        });
      }
      for (k in groups) {
        actions = groups[k];
        actions.items.sort(function(a, b) {
          if (a.priority > b.priority) {
            return -1;
          }
          if (a.priority < b.priority) {
            return 1;
          }
          return 0;
        });
      }
      complexMenu.show(groups, {
        top: $(e.target).offset().top + 27,
        left: $(e.target).offset().left
      });
    }
    return true;
  };
  activeGroup = null;
  getActiveGroup = function() {
    if (multiselect.state.focusedHash.length > 0) {
      return $(multiselect.state.lastFocused).parent();
    } else {
      return $('.feedGroup:hover')[0];
    }
  };
  $scope.stateTree.applyState({
    'name': 'timeline',
    'C cmd': function() {
      var item, items;
      items = multiselect.getFocused();
      item = items[0];
      return postService.getById(item.postId, function(post) {
        return multiselect.copyItem(post);
      });
    },
    'U cmd': function(repeat, defaultAction) {
      var i, item, items, len, where;
      items = multiselect.getFocused();
      where = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if (item.type === 'schedule') {
          where.push({
            type: 'post',
            id: item.postId
          });
        } else {
          where.push(item);
        }
      }
      return defaultAction(where);
    },
    'V cmd': function(repeat, defaultAction) {
      var items;
      items = multiselect.getFocused();
      return defaultAction(items);
    },
    'delete': function() {
      var cnt, focused, hasRule, hasScheds, i, item, len, placeholders, rulesCnt, scheds, schedsCnt;
      focused = multiselect.getFocused();
      scheds = [];
      cnt = focused.length;
      rulesCnt = 0;
      schedsCnt = 0;
      if (cnt > 0) {
        hasRule = false;
        hasScheds = false;
        placeholders = [];
        for (i = 0, len = focused.length; i < len; i++) {
          item = focused[i];
          if (item.type === 'placeholder') {
            hasRule = true;
            placeholders.push(item);
            rulesCnt++;
          } else {
            hasScheds = true;
            scheds.push(item);
            schedsCnt++;
          }
        }
        if (hasRule && hasScheds) {
          deleteRules(placeholders, function(res) {
            return deleteScheds(scheds, schedsCnt);
          });
        } else if (hasRule) {
          deleteRules(placeholders, function(res) {
            return inspectorService.reset();
          });
        } else if (hasScheds) {
          deleteScheds(scheds, schedsCnt);
        }
      }
      return true;
    },
    'left alt': (function(_this) {
      return function(repeat) {
        if (repeat) {
          return false;
        }
        activeGroup = getActiveGroup();
        if (activeGroup == null) {
          return false;
        }
        angular.element(activeGroup).scope().step(-1, false);
        return true;
      };
    })(this),
    'left alt up': (function(_this) {
      return function() {
        if (activeGroup == null) {
          return false;
        }
        angular.element(activeGroup).scope().stopStep();
        return true;
      };
    })(this),
    'right alt': function(repeat) {
      if (repeat) {
        return false;
      }
      activeGroup = getActiveGroup();
      if (activeGroup == null) {
        return false;
      }
      angular.element(activeGroup).scope().step(1, false);
      return true;
    },
    'right alt up': function() {
      if (activeGroup == null) {
        return false;
      }
      angular.element(activeGroup).scope().stopStep();
      return true;
    }
  });
  deleteScheds = function(focused, cnt) {
    return confirmBox.init({
      realText: localization.translate('post_delete_question') + ' ' + cnt + ' ' + localization.declensionPhrase(cnt, 'post_delete') + '?',
      description: 'post_delete_description'
    }, function() {
      var deleted, i, item, len, now, ref;
      deleted = [];
      for (i = 0, len = focused.length; i < len; i++) {
        item = focused[i];
        if (item.type === 'schedule') {
          if (item.userId !== account.user.id) {
            notificationCenter.addMessage({
              realText: 'Нельзя распланировать пост, запланированный другим пользователем',
              error: true
            });
            return;
          }
          now = new Date().getTime();
          if (smartDate.getShiftTimeBar(item.timestamp) < smartDate.getShiftTimeBar(now) + (5 * MIN)) {
            notificationCenter.addMessage({
              realText: 'Нельзя распланировать пост из прошлого',
              error: true
            });
            return;
          }
          if (ref = item.id, indexOf.call(deleted, ref) < 0) {
            deleted.push(item.id);
            scheduleService["delete"]({
              id: item.id
            });
          }
        }
      }
    });
  };
  deleteRules = function(placeholders, cb) {
    var actions, i, item, len, simpleDelete;
    simpleDelete = false;
    actions = [
      {
        text: 'remove_one',
        action: function() {
          ruleService.removePlaceholders(placeholders);
          return typeof cb === "function" ? cb(true) : void 0;
        }
      }, {
        text: 'remove_chain',
        action: function() {
          var i, item, len;
          for (i = 0, len = placeholders.length; i < len; i++) {
            item = placeholders[i];
            item.cut = true;
          }
          ruleService.removePlaceholders(placeholders, true);
          return typeof cb === "function" ? cb(true) : void 0;
        }
      }
    ];
    for (i = 0, len = placeholders.length; i < len; i++) {
      item = placeholders[i];
      if (item.ruleType === 'single') {
        simpleDelete = true;
      }
    }
    if (simpleDelete) {
      actions = [
        {
          text: 'remove_one',
          action: function() {
            ruleService.removePlaceholders(placeholders);
            return typeof cb === "function" ? cb(true) : void 0;
          }
        }
      ];
    }
    return desktopService.launchApp('optionsList', {
      message: 'post_delete_question',
      options: actions
    });
  };
  $scope.smartDate = smartDate;
  $scope.groups = groupService.storage;
  teamService.query({
    member: account.user.id
  }, function(items) {
    var i, item, j, len, len1, ref, ref1, ref2, ref3, ref4, teamIds, user;
    teamIds = [];
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      if (item.openContent !== false || item.userId === account.user.id) {
        teamIds.push(item.id);
        continue;
      }
      ref = item.members;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        user = ref[j];
        if (user.userId === account.user.id) {
          if (((ref1 = user.roles) != null ? ref1.editor : void 0) === true || ((ref2 = user.roles) != null ? ref2.mainEditor : void 0) === true || ((ref3 = user.roles) != null ? ref3.timeManager : void 0) === true || ((ref4 = user.roles) != null ? ref4.client : void 0) === true) {
            teamIds.push(item.id);
          }
          break;
        }
      }
    }
    return groupService.query({
      teamId: {
        '$in': teamIds
      }
    }, function() {
      return true;
    });
  });
  socketAuth.init(function() {
    return $scope.user = account.user;
  });
  return true;
});
