buzzlike.directive('postSchedule', function(communityService, scheduleService, confirmBox, smartDate, actionsService, complexMenu, postService) {
  return {
    restrict: 'C',
    link: function(scope, element, attrs) {
      var removing;
      scope.showGhaph = {
        likes: true,
        comments: true,
        reposts: true,
        commLikes: true
      };
      scope.triggerStat = function(type) {
        if (scope.graphShown === true) {
          return scope.showGhaph[type] = !scope.showGhaph[type];
        } else {
          return scope.graphShown = true;
        }
      };
      scope.hideGraph = function() {
        var k, ref, results, v;
        scope.graphShown = false;
        ref = scope.showGhaph;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(scope.showGhaph[k] = true);
        }
        return results;
      };
      scope.community = communityService.getById(scope.schedule.communityId);
      removing = false;
      scope.sendNow = function() {
        return scheduleService.sendNow(scope.schedule.id);
      };
      scope.saveTime = function() {
        var process;
        process = scope.progress.add();
        return scheduleService.save({
          id: scope.schedule.id,
          timestamp: scope.schedule.timestamp
        }, function() {
          return scope.progress.finish(process);
        });
      };
      scope.removeSchedule = function() {
        if (removing) {
          return false;
        }
        removing = true;
        return confirmBox.init(52, function() {
          var process;
          process = scope.progress.add();
          return scheduleService["delete"]({
            id: scope.schedule.id,
            type: 'schedule'
          }, function() {
            return scope.progress.finish(process);
          });
        });
      };
      return scope.scheduleAction = function(e) {
        var action, actions, groups, i, itemsActions, k, len, list;
        itemsActions = actionsService.getActions({
          source: [scope.schedule],
          context: scope.comb
        });
        if (itemsActions.length > 0) {
          groups = {};
          list = [];
          for (i = 0, len = itemsActions.length; i < len; i++) {
            action = itemsActions[i];
            if (groups[action.category] == null) {
              groups[action.category] = {
                type: 'actions',
                items: []
              };
            }
            groups[action.category].items.push({
              phrase: action.phrase,
              action: action.action,
              priority: action.priority
            });
          }
          for (k in groups) {
            actions = groups[k];
            actions.items.sort(function(a, b) {
              if (a.priority > b.priority) {
                return -1;
              }
              if (a.priority < b.priority) {
                return 1;
              }
              return 0;
            });
          }
        }
        groups.a = {
          object: scope.post,
          type: 'checkbox',
          selectFunction: function() {
            var process;
            process = scope.progress.add();
            return postService.save(scope.post, function() {
              return scope.progress.finish(process);
            });
          },
          items: [
            {
              phrase: 'schedule_params_fromCommunity',
              param: 'fromCommunity',
              disabled: scope.community.communityType === 'profile'
            }, {
              phrase: 'schedule_params_userSign',
              param: 'useUserSign',
              disabled: scope.post.fromCommunity === true || scope.community.communityType === 'profile'
            }
          ]
        };
        groups.b = {
          type: 'select',
          object: scope.post,
          param: 'deletionTime',
          items: [
            {
              phrase: 'schedule_params_dont_remove',
              value: 0
            }, {
              phrase: 'schedule_params_remove_15',
              value: 15 * MIN
            }, {
              phrase: 'schedule_params_remove_hour',
              value: 1 * HOUR
            }, {
              phrase: 'schedule_params_remove_day',
              value: 1 * DAY
            }
          ]
        };
        complexMenu.show(groups, {
          top: $(e.target).offset().top + 20,
          left: $(e.target).offset().left
        });
        return true;
      };
    }
  };
});
