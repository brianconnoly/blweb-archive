tC['/novaThemesFrame/template.jade'] = "<div class=\"novaFrameTopBarLayout\"> <div class=\"novaFrameTopBar\"> <div ng-click=\"showMenu($event)\" class=\"actionsMenu\">...</div> <div ng-model=\"zoom\" ng-change=\"updateZoom()\" class=\"novaZoomStatic\"></div> <div ng-click=\"newTheme()\" class=\"addItems\">+</div> </div> <div class=\"novaFrameContents novaRowScroller novaMultiselect showNovaInfo\"></div> </div>";

buzzlike.directive('novaThemesFrame', function(novaRowScroller, dynamicStyle, combService, novaWizard, projectService, localStorageService, updateService) {
  return {
    restrict: 'C',
    template: tC['/novaThemesFrame/template.jade'],
    replace: true,
    link: function(scope, element, attrs, ngModel) {
      var actionsMenu, addItems, blockMargin, elem, frameStorageCode, lastPerLine, lineHei, minMargin, novaMultiselect, ref, ref1, showNames, style, styleFrame, styleName, unreg, updateId;
      elem = $(element);
      addItems = $(elem.find('.addItems')[0]);
      actionsMenu = $(elem.find('.actionsMenu')[0]);
      novaMultiselect = $(elem.find('.novaMultiselect')[0]);
      scope.newTheme = function() {
        return novaWizard.fire('theme', {
          projectId: scope.session.item.id
        });
      };
      style = new dynamicStyle('.novaThemesFrame.$ div.novaItem');
      elem.addClass(style.className);
      styleName = new dynamicStyle('.novaThemesFrame.$ div.novaItem div.name');
      elem.addClass(styleName.className);
      styleFrame = new dynamicStyle('.novaThemesFrame.$ div.novaRowScrollerItems');
      elem.addClass(styleFrame.className);
      frameStorageCode = scope.appItem.id + '_' + ((ref = scope.flowFrame) != null ? (ref1 = ref.item) != null ? ref1.id : void 0 : void 0);
      scope.zoom = localStorageService.get('novaThemes_zoom_' + frameStorageCode) || 4.2;
      minMargin = 30;
      lastPerLine = null;
      lineHei = 0;
      blockMargin = 0;
      showNames = true;
      scope.updateZoom = function() {
        var frameWid, fz, hei, margin, perLine, ref2, rest, verticalMargin, wid;
        wid = scope.zoom * 30 | 0;
        hei = wid * 3 / 4;
        frameWid = elem.width();
        perLine = frameWid / (wid + minMargin) | 0;
        rest = frameWid - (perLine * wid);
        margin = rest / (perLine + 1);
        margin /= 2;
        verticalMargin = margin * 0.8 | 0;
        style.update("width: " + wid + "px; height: " + hei + "px; margin: " + verticalMargin + "px " + margin + "px;");
        styleFrame.update("padding: " + verticalMargin + "px " + margin + "px;");
        fz = hei * 0.2 / 2;
        if (fz < 10) {
          fz = 10;
        }
        styleName.update("font-size: " + fz + "px;");
        if (hei < 45 && showNames) {
          elem.addClass('noItemNames');
          showNames = false;
        } else if (hei > 45 && !showNames) {
          elem.removeClass('noItemNames');
          showNames = true;
        }
        if (lastPerLine !== null && lastPerLine !== perLine) {
          if ((ref2 = scope.scroller) != null) {
            ref2.setPerLine(perLine);
          }
        }
        lastPerLine = perLine;
        lineHei = hei + verticalMargin * 2;
        blockMargin = verticalMargin * 2;
        return true;
      };
      scope.updateZoom();
      unreg = scope.$watch('appItem.type', function(nVal) {
        var scrollerElem;
        if (nVal != null) {
          unreg();
          scrollerElem = elem.find('.novaFrameContents');
          return scope.scroller = new novaRowScroller({
            query: {
              projectId: scope.session.item.id,
              parent: 'null'
            },
            sortBy: 'created',
            pageHeight: scrollerElem.height(),
            elem: scrollerElem,
            perLine: lastPerLine,
            lineHei: lineHei,
            blockMargin: blockMargin,
            queryFunc: combService.query,
            apply: function() {
              return scope.$applyAsync();
            }
          });
        }
      });
      scope.handleResize = function() {
        return scope.updateZoom();
      };
      scope.handleResizeEnd = function() {
        var ref2;
        return (ref2 = scope.scroller) != null ? ref2.rebuild() : void 0;
      };
      scope.parentItem = projectService.getById(scope.session.item.id);
      updateId = updateService.registerUpdateHandler(function(data, action, items) {
        var affected, i, item, len;
        if (action === 'update' || action === 'create' || action === 'delete') {
          if (data['comb'] != null) {
            affected = [];
            for (i = 0, len = items.length; i < len; i++) {
              item = items[i];
              if (item.type === 'comb') {
                affected.push(combService.getById(item.id));
              }
            }
            if (affected.length > 0) {
              return scope.scroller.updated(affected, action);
            }
          }
        }
      });
      return scope.$on('$destroy', function() {
        return updateService.unRegisterUpdateHandler(updateId);
      });
    }
  };
});

registerStyles('novaThemesFrame', ".novaThemesFrame .novaFrameTopBar .addItems {\n  float: left;\n  height: 30px;\n  width: 30px;\n  margin-right: 8px;\n  line-height: 30px;\n  text-align: center;\n  font-size: 27px;\n  opacity: 0.6;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\";\n  filter: alpha(opacity=60);\n  cursor: pointer;\n  -webkit-transform: scale(1);\n  -moz-transform: scale(1);\n  -o-transform: scale(1);\n  -ms-transform: scale(1);\n  transform: scale(1);\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaThemesFrame .novaFrameTopBar .addItems:active {\n  -webkit-transform: scale(0.9);\n  -moz-transform: scale(0.9);\n  -o-transform: scale(0.9);\n  -ms-transform: scale(0.9);\n  transform: scale(0.9);\n}\n.novaThemesFrame .novaFrameTopBar .addItems:hover {\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaThemesFrame .novaFrameTopBar .novaZoomStatic {\n  float: right;\n}\n.novaThemesFrame .novaFrameTopBar .actionsMenu {\n  float: right;\n  margin-right: 5px;\n  width: 30px;\n  height: 30px;\n  font-size: 25px;\n  line-height: 20px;\n  font-weight: bold;\n  text-align: center;\n  cursor: pointer;\n  opacity: 0.6;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\";\n  filter: alpha(opacity=60);\n  -webkit-transform: scale(1);\n  -moz-transform: scale(1);\n  -o-transform: scale(1);\n  -ms-transform: scale(1);\n  transform: scale(1);\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}\n.novaThemesFrame .novaFrameTopBar .actionsMenu:active {\n  -webkit-transform: scale(0.9);\n  -moz-transform: scale(0.9);\n  -o-transform: scale(0.9);\n  -ms-transform: scale(0.9);\n  transform: scale(0.9);\n}\n.novaThemesFrame .novaFrameTopBar .actionsMenu:hover {\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.novaThemesFrame .novaRowScrollerItems > .novaContentItem > .novaItem {\n  -webkit-box-shadow: 0 0 2px 0 rgba(0,0,0,0.2);\n  box-shadow: 0 0 2px 0 rgba(0,0,0,0.2);\n}\n");
